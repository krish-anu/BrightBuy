name: CI/CD - Build, Push, Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_BASE: anusan2003/brightbuy

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # BACKEND: install & test
      - name: Setup Node (backend)
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install backend deps
        run: |
          cd backend
          npm ci
      - name: Run backend tests
        run: |
          cd backend
          npm test

      # FRONTEND: install & build
      - name: Setup Node (frontend)
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install frontend deps & build
        run: |
          cd frontend
          # Use secret if available; otherwise fallback to a harmless placeholder for PR builds
          export VITE_STRIPE_PUBLISHABLE_KEY="${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}"
          if [ -z "$VITE_STRIPE_PUBLISHABLE_KEY" ]; then
            echo "VITE_STRIPE_PUBLISHABLE_KEY not provided; using placeholder for PR build"
            export VITE_STRIPE_PUBLISHABLE_KEY="pk_test_placeholder_123"
          fi
          npm ci
          npm run build

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Docker Hub secrets
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "ERROR: Missing required secrets DOCKER_USERNAME and/or DOCKER_PASSWORD.";
            exit 1;
          fi

      - name: Validate frontend publishable key (main only)
        run: |
          if [ -z "${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" ]; then
            echo "ERROR: Missing secret VITE_STRIPE_PUBLISHABLE_KEY for main image build.";
            exit 1;
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_BASE }}-backend:${{ github.sha }}
            ${{ env.IMAGE_BASE }}-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
          tags: |
            ${{ env.IMAGE_BASE }}-frontend:${{ github.sha }}
            ${{ env.IMAGE_BASE }}-frontend:latest

  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate deploy secrets
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BACKEND_ENV: ${{ secrets.BACKEND_ENV }}
        run: |
          missing=0
          for v in SERVER_HOST SERVER_USER SERVER_SSH_KEY DOCKER_USERNAME DOCKER_PASSWORD BACKEND_ENV; do
            if [ -z "${!v}" ]; then echo "Missing secret: $v"; missing=1; fi
          done
          if [ "$missing" -eq 1 ]; then
            echo "❌ One or more required secrets are missing."; exit 1; fi

      - name: Create backend .env locally
        run: |
          mkdir -p backend
          echo "${{ secrets.BACKEND_ENV }}" > backend/.env

      - name: Verify files exist before upload
        run: |
          echo "Listing repository root:" && ls -la
          echo "Listing backend directory:" && ls -la backend || true
          echo "Check specific files:" 
          for f in docker-compose.prod.yml seed.sql backend/.env; do
            if [ -f "$f" ]; then echo "✔ exists: $f"; else echo "✖ missing: $f"; fi
          done

      - name: Ensure remote target directory exists
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p ~/brightbuy

      - name: Upload deployment files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./docker-compose.prod.yml,./seed.sql,./backend/.env"
          target: "~/brightbuy/"
          overwrite: true

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: '120s'
          debug: true
          script: |
            set -e
            PROJECT_DIR="$HOME/brightbuy"
            cd "$PROJECT_DIR"

            echo "=== Verify uploaded files ==="
            ls -la

            echo "=== Logging into Docker Hub ==="
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            IMAGE_BASE="${{ env.IMAGE_BASE }}"
            BACKEND_SHA="${{ github.sha }}"
            FRONTEND_SHA="${{ github.sha }}"

            echo "=== Pulling Docker images ==="
            docker pull ${IMAGE_BASE}-backend:$BACKEND_SHA || docker pull ${IMAGE_BASE}-backend:latest
            docker pull ${IMAGE_BASE}-frontend:$FRONTEND_SHA || docker pull ${IMAGE_BASE}-frontend:latest

            docker tag ${IMAGE_BASE}-backend:$BACKEND_SHA ${IMAGE_BASE}-backend:latest || true
            docker tag ${IMAGE_BASE}-frontend:$FRONTEND_SHA ${IMAGE_BASE}-frontend:latest || true

            echo "=== Deploying containers ==="
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "🚀 Deployment completed successfully on $(hostname)"

            echo "=== Post-deploy diagnostics ==="
            echo "Docker compose ps:" && docker compose -f docker-compose.prod.yml ps || true
            echo "Listening ports (80,8081):" && (ss -tulpn | grep -E ":(80|8081)\s" || true)
            echo "Frontend logs (last 100 lines):" && docker compose -f docker-compose.prod.yml logs --no-color --tail=100 frontend || true
            echo "Backend logs (last 100 lines):" && docker compose -f docker-compose.prod.yml logs --no-color --tail=100 backend || true
            echo "Curl localhost:80 headers:" && (curl -sI http://localhost/ || true)
            echo "Curl backend root:" && (curl -s http://localhost:8081/ || true)
